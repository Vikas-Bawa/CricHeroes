{"ast":null,"code":"import { call, put } from \"redux-saga/effects\";\nimport { STATUS_CODES } from \"Services/Api/Constants\";\nimport { STRINGS } from \"Shared/Constants\";\nimport { LOGOUT } from \"Redux/Actions/Auth\";\nimport { ACTION_STATES } from \"Redux/Actions/ActionStates\";\n\nfunction* requestSaga(fn = () => {}, action = {\n  type: \"ACTION_TYPE\"\n}) {\n  if (!navigator.onLine) {\n    return;\n  }\n\n  const {\n    type\n  } = action;\n  yield put({\n    type: type + ACTION_STATES.REQUEST\n  });\n\n  try {\n    const response = yield call(fn, action);\n\n    switch (response.status) {\n      case STATUS_CODES.SUCCESS:\n        {\n          yield put({\n            type: type + ACTION_STATES.SUCCESS,\n            data: response.data\n          });\n          break;\n        }\n\n      case STATUS_CODES.UNAUTHORIZED:\n        {\n          yield put({\n            type: LOGOUT + ACTION_STATES.SUCCESS\n          });\n          break;\n        }\n\n      case STATUS_CODES.BAD_REQUEST:\n        {\n          yield put({\n            type: type + ACTION_STATES.FAILURE,\n            msg: response.data.msg\n          });\n          break;\n        }\n\n      default:\n        {\n          yield put({\n            type: type + ACTION_STATES.FAILURE,\n            msg: STRINGS.SOMETHING_WENT_WRONG\n          });\n        }\n    }\n  } catch (error) {\n    yield put({\n      type: type + ACTION_STATES.FAILURE,\n      msg: STRINGS.SOMETHING_WENT_WRONG\n    });\n  }\n}\n\nexport default requestSaga;","map":{"version":3,"sources":["/home/chicmic/Documents/React-JavaScript-Study/src/Shared/RequestSaga.js"],"names":["call","put","STATUS_CODES","STRINGS","LOGOUT","ACTION_STATES","requestSaga","fn","action","type","navigator","onLine","REQUEST","response","status","SUCCESS","data","UNAUTHORIZED","BAD_REQUEST","FAILURE","msg","SOMETHING_WENT_WRONG","error"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AAEA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,aAAT,QAA8B,4BAA9B;;AAEA,UAAUC,WAAV,CAAsBC,EAAE,GAAG,MAAM,CAAE,CAAnC,EAAqCC,MAAM,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA9C,EAAuE;AACrE,MAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrB;AACD;;AACD,QAAM;AAAEF,IAAAA;AAAF,MAAWD,MAAjB;AACA,QAAMP,GAAG,CAAC;AACRQ,IAAAA,IAAI,EAAEA,IAAI,GAAGJ,aAAa,CAACO;AADnB,GAAD,CAAT;;AAGA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACO,EAAD,EAAKC,MAAL,CAA3B;;AACA,YAAQK,QAAQ,CAACC,MAAjB;AACE,WAAKZ,YAAY,CAACa,OAAlB;AAA2B;AACzB,gBAAMd,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEA,IAAI,GAAGJ,aAAa,CAACU,OADnB;AAERC,YAAAA,IAAI,EAAEH,QAAQ,CAACG;AAFP,WAAD,CAAT;AAIA;AACD;;AACD,WAAKd,YAAY,CAACe,YAAlB;AAAgC;AAC9B,gBAAMhB,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEL,MAAM,GAAGC,aAAa,CAACU;AADrB,WAAD,CAAT;AAGA;AACD;;AACD,WAAKb,YAAY,CAACgB,WAAlB;AAA+B;AAC7B,gBAAMjB,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEA,IAAI,GAAGJ,aAAa,CAACc,OADnB;AAERC,YAAAA,GAAG,EAAEP,QAAQ,CAACG,IAAT,CAAcI;AAFX,WAAD,CAAT;AAIA;AACD;;AACD;AAAS;AACP,gBAAMnB,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEA,IAAI,GAAGJ,aAAa,CAACc,OADnB;AAERC,YAAAA,GAAG,EAAEjB,OAAO,CAACkB;AAFL,WAAD,CAAT;AAID;AA1BH;AA4BD,GA9BD,CA8BE,OAAOC,KAAP,EAAc;AACd,UAAMrB,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEA,IAAI,GAAGJ,aAAa,CAACc,OADnB;AAERC,MAAAA,GAAG,EAAEjB,OAAO,CAACkB;AAFL,KAAD,CAAT;AAID;AACF;;AAED,eAAef,WAAf","sourcesContent":["import { call, put } from \"redux-saga/effects\";\n\nimport { STATUS_CODES } from \"Services/Api/Constants\";\nimport { STRINGS } from \"Shared/Constants\";\nimport { LOGOUT } from \"Redux/Actions/Auth\";\nimport { ACTION_STATES } from \"Redux/Actions/ActionStates\";\n\nfunction* requestSaga(fn = () => {}, action = { type: \"ACTION_TYPE\" }) {\n  if (!navigator.onLine) {\n    return;\n  }\n  const { type } = action;\n  yield put({\n    type: type + ACTION_STATES.REQUEST,\n  });\n  try {\n    const response = yield call(fn, action);\n    switch (response.status) {\n      case STATUS_CODES.SUCCESS: {\n        yield put({\n          type: type + ACTION_STATES.SUCCESS,\n          data: response.data,\n        });\n        break;\n      }\n      case STATUS_CODES.UNAUTHORIZED: {\n        yield put({\n          type: LOGOUT + ACTION_STATES.SUCCESS,\n        });\n        break;\n      }\n      case STATUS_CODES.BAD_REQUEST: {\n        yield put({\n          type: type + ACTION_STATES.FAILURE,\n          msg: response.data.msg,\n        });\n        break;\n      }\n      default: {\n        yield put({\n          type: type + ACTION_STATES.FAILURE,\n          msg: STRINGS.SOMETHING_WENT_WRONG,\n        });\n      }\n    }\n  } catch (error) {\n    yield put({\n      type: type + ACTION_STATES.FAILURE,\n      msg: STRINGS.SOMETHING_WENT_WRONG,\n    });\n  }\n}\n\nexport default requestSaga;\n"]},"metadata":{},"sourceType":"module"}